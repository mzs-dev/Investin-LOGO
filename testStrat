// SPDX-License-Identifier: MIT
//["0xeE805b0d550426E689826BBb28B313b8e76839d2","0x4F9514e4aB8B89959Ed78a0c13A7ad7f8ce57bCE","0x5B8F0D39Db161f70510134F74e1c23D454c07320"]
//["0xfBF722c7A1A764E0f2C17651C9D05BFe2Dbee92e","0x1a3aD436a3be4eCf9095bf1f5c445d9c3812d4C5","0x14c35e037C9D1D832bd336d463EB5Fb379E22aC4"]
//["0xd0A1E359811322d97991E03f863a0C30C2cF029C","0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa","0x30bc36A80e391E29Fc88e736DA6752C26fc386EC"]

//["0xE085f1B069869Dd143EDA6733ffA1D25520c1359", "0x36835947D4D4967818DE627451fB8c595Bb439dA"]

/*
***Caution:
***a big caveat for the current auto-compound farming strategies is that:
***We need to have super liquid direct exchange pairs bewteen:
***Base_Token and Token0 of the LP
***Base_Token and Token1 of the LP
***Reward_Token and Token0 of the LP
***Reward_Token and Token1 of the LP
*/

//*********************************************************************OPTIMIZED FOR WBNB BASE*********************************************************

//0x02CD27e4caf8495b9c98c1CFae386bbeCB26dcE9

pragma solidity 0.6.12;

import "https://github.com/aak-capital/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/aak-capital/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";

interface iFarm{
    function deposit(uint256 _pid, uint256 _amount) external;
    function pendingCake(uint256 _pid, address _user) external view returns (uint256);
    function withdraw(uint256 _pid, uint256 _amount) external;
    function emergencyWithdraw(uint256 _pid) external;
}

interface iMasterChef{
    function deposit(uint256 _pid, uint256 _amount) external;
    function withdraw(uint256 _pid, uint256 _amount) external;
    function pendingCake(uint256 _pid, address _user) external view returns (uint256);
}

interface iExchangeFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
}

interface iFarmingStrategy{
    function getStrategyTokenPrice() external view returns (uint);
    function exit(uint256 amount) external;
    function enter(uint256 amount, bool isFund) external;
    function emergencyExit(uint256 amount) external;
    // function baseToken() view external returns(address);
}

interface iFundFactory{
    function getFundMapping (address _fund) external view returns (bool);
    function routerAddress() external view returns(address);
}

interface iExchangeRouter{
    function getAmountsOut(uint amountIn, address[] memory path) view external returns (uint[] memory amounts);
    function factory() external view returns (address);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
}

interface iExchangePair is IERC20{
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function token0() external view returns (address);
    function token1() external view returns (address);
}
// Investintoken with Governance.
contract TESTINStrategyToken is ERC20("PCS-WBNB-LP(NRVxBNB)-CAKE", "UCBs-1"), Ownable, iFarmingStrategy {
    
    address constant stableCoin = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    address public constant baseToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    iExchangeRouter constant exchangeRouter = iExchangeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    iExchangePair constant lPToken = iExchangePair(0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16);
    address constant token0 = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address constant token1 = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    iMasterChef constant rewardPool = iMasterChef(0x73feaa1eE314F8c655E354234017bE2193C9E24E);
    uint256 constant pid = 252;
    address constant rewardToken = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;
    
    uint constant MAX_UINT_VALUE = type(uint).max;
    
    uint256 public principalStaked;
    uint256 public reinvestIncentive = 100;
    uint256 public minValforReinvest = 1e19;
    uint256 public entryFee = 100;
    
    address[] fundFactories;
    
    address constant investinVault = 0x064103ffD68f9F7410Cebd236Dc49a568CC5fde8;
    
    address[] public path_BaseToToken0;
    address[] public path_BaseToToken1;
    address[] public path_RewardToToken0;
    address[] public path_RewardToToken1;
    address[] public path_Token0ToBase;
    address[] public path_Token1ToBase;
    
    bool public status = true;
    
    constructor(address[] memory _fundFactories) public {
        fundFactories = _fundFactories;//0xE8Ee74337d10CF49578F1B84113383ae3CB4570b
        // baseToken = IERC20(_baseToken);//0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c----0xd0A1E359811322d97991E03f863a0C30C2cF029C
        // lPToken = iExchangePair(_lPToken);//0xddE420cbB3794ebD8FFC3Ac69F9c78e5d1411870---0xe8dB89C9D3d5459cfEBEE8Ec7FAE07b6988EE46c
        // rewardPool = iFarm(_rewardPool);//0x73feaa1eE314F8c655E354234017bE2193C9E24E---0x23D6Be0079309a35c92CaB1D6Ebd286130ED4311
        // pid = _pid;
        // rewardToken = IERC20(_rewardToken);//0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82---0x30bc36A80e391E29Fc88e736DA6752C26fc386EC
        //exchangeRouter = iExchangeRouter(_exchangeRouter);//0x10ED43C718714eb63d5aA57B78B54704E256024E---0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        
        IERC20(baseToken).approve(address(exchangeRouter), MAX_UINT_VALUE);
        IERC20(token0).approve(address(exchangeRouter), MAX_UINT_VALUE);
        //IERC20(token1).approve(exchangeRouter, MAX_UINT_VALUE); token1 == basetoken
        IERC20(lPToken).approve(address(rewardPool), MAX_UINT_VALUE);
        IERC20(rewardToken).approve(address(exchangeRouter), MAX_UINT_VALUE);
        IERC20(lPToken).approve(address(exchangeRouter), MAX_UINT_VALUE);
        
    }
    
    function addFactory(address[] calldata _fundFactories) external onlyOwner{
        for(uint i = 0; i<_fundFactories.length; i++){
            fundFactories.push(_fundFactories[i]);
        }
    }
    
    function updateEntryFee(uint val) external onlyOwner{
        require(val<=100, "Too High");//1% max
        entryFee = val;
    }
    
    function updateReinvestIncentive(uint amt) external onlyOwner{
        require(amt<=1000, "Too High");//10% max
        reinvestIncentive = amt;
    }
    
    function updateStatus(bool _value) external onlyOwner{
        status = _value;
    }
    
    //vvv Only for testing vvv
    function customApprove(address tokenToApprove, address approveAccount) external onlyOwner{
        //require(tokenToApprove!=baseToken||tokenToApprove!=address(lPToken)||tokenToApprove!=address(rewardToken))
        IERC20(tokenToApprove).approve(approveAccount, MAX_UINT_VALUE);
    }
    
    function burn(address account, uint256 amount) internal {
        _burn(account, amount);
    }
    
    function mint(address to, uint256 amount) internal{
        _mint(to, amount);
    }
    
    function viewPendingRewards() external view returns(uint rewardAmt){
        rewardAmt = rewardPool.pendingCake(pid, address(this));
    } 
    function updateMinValforReinvest(uint val) external onlyOwner{
        minValforReinvest = val;
    }
    
    
    function enter(uint256 amount, bool isFund) external override{
        require(status==true, "Strategy Inactive");
        address _baseToken = address(baseToken);
        IERC20(_baseToken).transferFrom(msg.sender, address(this), amount);
        
        if(isFund==true){
            isFund = false;
            address[] memory _fundFactories = fundFactories;
            for(uint i=0;i<_fundFactories.length;i++){
                if(iFundFactory(_fundFactories[i]).getFundMapping(msg.sender)){
                    isFund = true;
                    break;
                }
            }
        }
        if(isFund==false){
            uint _entryFee = (amount*entryFee)/10000;
            IERC20(_baseToken).transfer(investinVault, _entryFee);
            amount -= _entryFee;
        }
        
        
        //address _stableCoin = stableCoin;
        address _token0 = lPToken.token0();
        address _token1 = lPToken.token1();
        uint token0Amount = amount/2;
        uint token1Amount = amount/2;
        if(_baseToken!=_token0){
            address[] memory path = new address[](2);
            path[0] = _baseToken;
            path[1] = _token0;
            token0Amount = exchangeRouter.swapExactTokensForTokens(amount/2, 1, path, address(this), now)[1];
        }
        if(_baseToken!=_token1){
            address[] memory path1 = new address[](2);
            path1[0] = _baseToken;
            path1[1] = _token1;
            token1Amount = exchangeRouter.swapExactTokensForTokens(amount/2, 1, path1, address(this), now)[1];
        }
        
        (, , uint liquidity) = exchangeRouter.addLiquidity(_token0, _token1, token0Amount, token1Amount, 1, 1, address(this), now);
        require(liquidity>0, "addLiquidity Failed");//Could this be better?
        
        uint _totalSupply = totalSupply();
        uint multiplier = _totalSupply!=0?(_totalSupply*(1e18))/principalStaked:0;
        
        rewardPool.deposit(pid, liquidity);
        principalStaked+=liquidity;
        
        if(_totalSupply>0){
            liquidity = (liquidity*multiplier)/1e18;
        }
        
        mint(msg.sender, liquidity);
        
    }
    
    
    function exitHelper(uint256 mv) internal{
        address _baseToken = address(baseToken);
        address _token0 = lPToken.token0();
        address _token1 = lPToken.token1();
        (uint token0Amount, uint token1Amount) = exchangeRouter.removeLiquidity(_token0, _token1, mv, 1, 1, address(this), now);
        if(_baseToken!=_token0){
            address[] memory path = new address[](2);
            path[0] = _token0;
            path[1] = _baseToken;
            token0Amount = exchangeRouter.swapExactTokensForTokens(token0Amount, 1, path, address(this), now)[1];
        }
        if(_baseToken!=_token1){
            address[] memory path1 = new address[](2);
            path1[0] = _token1;
            path1[1] = _baseToken;
            token1Amount = exchangeRouter.swapExactTokensForTokens(token1Amount, 1, path1, address(this), now)[1];
        }
        baseToken.transfer(msg.sender, token1Amount+token0Amount);
    }
     
    function exit(uint256 amount) external override{
        uint mv = (amount.mul((principalStaked*1e18)/totalSupply()))/(1e18);
        if(status)rewardPool.withdraw(pid, mv);
        principalStaked-=mv;
        exitHelper(mv);
        burn(msg.sender, amount);
    }
    
    function emergencyExit(uint256 amount) public override{
        uint mv = (amount.mul((principalStaked*1e18)/totalSupply()))/(1e18);
        principalStaked-=mv;
        exitHelper(mv);
        burn(msg.sender, amount);
    }
    
    function invokeEmergencyWithdraw() external onlyOwner {
        rewardPool.emergencyWithdraw(pid);
        status = false;
    }
    
    
    function reinvest() public{
        require(status==true, "Strategy Inactive");
        rewardPool.withdraw(pid, 0);
        address _rewardToken = address(rewardToken);
        uint256 reward = rewardToken.balanceOf(address(this));
        require(reward > 0);
        uint256 bounty = reward*reinvestIncentive / 10000;
        rewardToken.transfer(msg.sender, bounty);
        reward -= bounty;
        address _token0 = lPToken.token0();
        address _token1 = lPToken.token1();//WBNB
        address[] memory path1 = new address[](2);
        path1[0] = _rewardToken;
        path1[1] = _token1;
            
        uint token1Amount = exchangeRouter.swapExactTokensForTokens(reward, 1, path1, address(this), now)[1];
        uint token0Amount = reward/2;
        
        address[] memory path = new address[](2);
        path[0] = _token1;
        path[1] = _token0;
        token0Amount = exchangeRouter.swapExactTokensForTokens(token1Amount/2, 1, path, address(this), now)[1];
        
        // if(_rewardToken!=_token0){
        //     address[] memory path = new address[](2);
        //     path[0] = _rewardToken;
        //     path[1] = _token0;
        //     token0Amount = exchangeRouter.swapExactTokensForTokens(reward/2, 1, path, address(this), now)[1];
        // }
        // if(_rewardToken!=_token1){
        //     address[] memory path1 = new address[](2);
        //     path1[0] = _rewardToken;
        //     path1[1] = _token1;
        //     token1Amount = exchangeRouter.swapExactTokensForTokens(reward/2, 1, path1, address(this), now)[1];
        // }
        
        
        (, , uint liquidity) = exchangeRouter.addLiquidity(_token0, _token1, token0Amount, token1Amount/2, 1, 1, address(this), now);
        require(liquidity>0, "addLiquidity Failed");//Could this be better?
        rewardPool.deposit(pid, liquidity);
        principalStaked+=liquidity;
    }
    
    
    function getStrategyTokenPrice() public view override returns (uint) {
        address _token0 = lPToken.token0();
        address _token1 = lPToken.token1();
        uint LPtotalSupply = lPToken.totalSupply();
        (uint r0, uint r1, ) = lPToken.getReserves();
        uint sqrtR = sqrt(r0.mul(r1));
        address _baseToken = address(baseToken);
        uint p0 = _token0==_baseToken?1e18:getTokenPrice(_token0, _baseToken);
        uint p1 = _token1==_baseToken?1e18:getTokenPrice(_token1, _baseToken);
        uint sqrtP;
        if(stableCoin==_baseToken){
            sqrtP = (sqrt(p0.mul(p1)));
        }
        else{
            sqrtP = (sqrt(p0.mul(p1)).mul(getTokenPrice(_baseToken, stableCoin))).div(1e18);
        }
        
        uint _totalSupply = totalSupply();
        if(_totalSupply!=0)
            return (((sqrtR.mul(sqrtP).mul(2)).div(LPtotalSupply)).mul((principalStaked*1e18)/_totalSupply))/(1e18);
        else
            return ((sqrtR.mul(sqrtP).mul(2)).div(LPtotalSupply));
    }
    
    function sqrt(uint x) public pure returns (uint) {
        uint z = (x + 1) / 2;
        uint y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }
    
    function getTokenPrice(address _tokenIn, address _tokenOut) public view returns (uint) { 
        iExchangeFactory exchangeFactory = iExchangeFactory(exchangeRouter.factory()); 
        (uint res0, uint res1, ) = iExchangePair(exchangeFactory.getPair(_tokenIn, _tokenOut)).getReserves();
        uint price = _tokenIn == iExchangePair(exchangeFactory.getPair(_tokenIn, _tokenOut)).token1() ? (res0.mul(10 ** 18)).div(res1) : (res1.mul(10 ** 18)).div(res0);
        return price;
    }


    
}
